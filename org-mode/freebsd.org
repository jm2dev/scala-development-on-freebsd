* FreeBSD installation

Get a nightly build iso image ready for pendrives and copy it.

#+NAME: Copy image to installation media
#+BEGIN_SRC sh
$ wget ftp://ftp.freebsd.org/pub/FreeBSD/releases/ \\
amd64/amd64/ISO-IMAGES/9.1/FreeBSD-9.1-RC1-amd64-memstick.img

# dd if=FreeBSD-9.1-RC1-amd64-memstick.img of=/dev/da0 bs=64k
#+END_SRC

** User setup

I like the following packages:

- zsh
- tmux
- xorg
- xmobar
- dmenu
- xmonad
- xmomad-contrib
- vim
- emacs
- firefox
- git
- openjdk7

** Zsh settings

#+NAME: .zshrc
#+BEGIN_SRC sh 
# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt autocd
unsetopt beep
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '/home/jm/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall  
#+END_SRC sh

** Vim settings

#+NAME: .vimrc
#+BEGIN_SRC sh
set nomodeline
set nu
#+END_SRC

** Xmobar

#+NAME: .xmobarrc
#+BEGIN_SRC sh
Config { font = "-b&h-lucida-medium-r-normal-sans-10-100-75-75-p-58-iso8859-1"
	, bgColor = "#2f4f4f"
	, fgColor = "#ffaaaa"
	, position = Top
	, lowerOnStart = True
	, commands = [ Run Weather "EGLC" ["-t","<tempC>C","-L","40","-H","80","--high","red","--low","#3333FF"] 36000
		, Run Com "echo" ["$USER"] "username" 864000
		, Run Com "hostname" ["-s"] "hostname" 864000
		, Run Com "uname" ["-sr"] "os" 864000
		, Run Date "%a %b %_d" "date" 36000
		, Run Date "%H:%M:%S" "time" 10
		, Run Com "mem" ["-tm"] "memtot" 36000
		, Run Com "mem" ["-um"] "memused" 10
		, Run Com "mem" ["-pct"] "mempct" 10
		, Run Com "loadavg" [] "loadavg" 10
		, Run Com "batt" [] "batt" 600
		, Run StdinReader
	]
	, sepChar = "'"
	, alignSep = "}{"
	, template = "'StdinReader' } <fc=#3d3d07>|</fc> 'username' <fc=#3d3d07>|</fc> 'hostname' <fc=#3d3d07>|</fc> 'os' <fc=#3d3d07>|</fc> Mem 'memused'/'memtot'mb <fc=#3d3d07>|</fc> Load 'loadavg' <fc=#3d3d07>|</fc> Batt 'batt' <fc=#3d3d07>|</fc>{'date' <fc=#3d3d07>|</fc> 'time' <fc=#3d3d07>|</fc> 'EGLC'"
}
#+END_SRC

#+NAME: bin/mem
#+BEGIN_SRC sh
#!/bin/sh
m_pagesize() { sysctl -n hw.pagesize; }
m_availpages() { expr `sysctl -n vm.stats.vm.v_free_count` + `sysctl -n vm.stats.vm.v_inactive_count` + `sysctl -n vm.stats.vm.v_cache_count`; }
m_avail() { expr `m_availpages` \* `m_pagesize`; }
m_total() { sysctl -n hw.physmem; }
m_used() { expr `m_total` - `m_avail`; }
m_to_mb() { expr $1 / 1048576; }

case $1 in
    -f)  m_avail;;
    -fm) m_to_mb `m_avail`;;
    -t)  m_total;;
    -tm) m_to_mb `m_total`;;
    -u)  m_used;;
    -um) m_to_mb `m_used`;;
    -p)  expr `m_used` \* 100 / `m_total`;;
    -h)  echo "usage:";
	 echo
	 echo "-h	Help";
	 echo "-f	Free";
	 echo "-fm	Free (megabytes)";
	 echo "-p	Percent used";
	 echo "-t	Total";
	 echo "-tm	Total (megabytes)";
	 echo "-u	Used";
	 echo "-um	Used (megabytes)";;
    *)	 echo "Total: `m_total`, Avail: `m_avail`, Used: `m_used`";;
esac
#+END_SRC

#+NAME: bin/loadavg
#+BEGIN_SRC sh
#!/bin/sh
sysctl -n vm.loadavg | sed 's/ *[{}] *//g'
#+END_SRC

#+NAME: bin/batt
#+BEGIN_SRC sh
#!/bin/sh
mins=`sysctl -n hw.acpi.battery.time`
case `sysctl -n hw.acpi.battery.state` in
1)  state="discharging";;
2)  state="charging";;
*)  state="";;
esac
if [ $mins -ge 0 ]
then
    state="$mins mins, $state"
fi
if [ "$state" != "" ]
then
    state=" ($state)"
fi
echo "`sysctl -n hw.acpi.battery.life`%$state"
#+END_SRC

** Xmonad

#+NAME: .xmonad/xmonad.hs
#+BEGIN_SRC haskell
import XMonad
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Util.Run(spawnPipe)
import XMonad.Util.EZConfig(additionalKeys)
import System.IO

myManageHook = composeAll
    [ className =? "Gimp" --> doFloat
    , className =? "VLC" --> doFloat
    , className =? "VLC media player" --> doFloat
    , className =? "GroovyConsole" --> doFloat
    , className =? "Luke" --> doFloat
    ]

main = do
    xmproc <- spawnPipe "xmobar"
    xmonad $ defaultConfig
        { XMonad.terminal = "urxvt"
		, manageHook = manageDocks <+> myManageHook 
                          <+> manageHook defaultConfig
        , layoutHook = avoidStruts  $  layoutHook defaultConfig
        , logHook = dynamicLogWithPP $ xmobarPP
            { ppOutput = hPutStrLn xmproc
            , ppTitle = xmobarColor "green"  "" . shorten 50
            }
	, modMask = mod4Mask -- rebind mod to the windows key
        } `additionalKeys`
        [ ((mod4Mask .|. shiftMask, xK_z), spawn "xscreensaver-command -lock")
        ]
  
#+END_SRC


